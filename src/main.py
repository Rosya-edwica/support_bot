from aiogram import Bot, executor, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import keyboards as kb
import tools
import re
from models import NewQuestion, NewAnswer, Mailing
from db import Storage
from datetime import datetime
import argparse

parser = argparse.ArgumentParser(
                    prog='–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Edwica.ru',
                    description='–ù—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º',
                    epilog='Text at the bottom of help')

parser.add_argument("-b", "--bot", required=True, help="–í—ã–±–µ—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞: edwica, openedu, profinansy")
args = parser.parse_args()

config = [cfg for cfg in tools.load_config() if cfg.BotName == args.bot][0]


bot = Bot(config.Token)
dp = Dispatcher(bot, storage=MemoryStorage())
mongoStorage = Storage(db_name=config.MongodbName)
preparedQuestions = mongoStorage.get_questions()
UserCacheCategories = {}
UserCacheEmails = {}
UserTimedMessageCache = {}

class UserQuestion(StatesGroup):
    Email = State()
    New = State()

class AdminMailing(StatesGroup):
    New = State()
    Image = State()


@dp.message_handler(commands=["start"])
async def start_command(msg: types.Message):
    """–ê–¥–º–∏–Ω—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω–∏ –∫–Ω–æ–ø–∫–∏, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–≥–∏–µ"""

    user_id = msg.from_user.id
    if user_id in tools.ADMINS:
        await msg.answer(text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞", reply_markup=kb.get_admin_menu())
    else:
        categories = mongoStorage.get_categories()
        await msg.answer(text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=kb.get_users_menu(categories))


@dp.message_handler()
async def text_message_filter(msg: types.Message):
    if msg.from_user.id in config.Admins:
        await admin_message_filter(msg)
    else:
        await user_message_filter(msg)


# ------------------------------------------------------user------------------------------------------------------------------

async def user_message_filter(msg: types.Message):
    if await check_message_is_category(msg):
        # –°—Ü–µ–Ω–∞—Ä–∏–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await show_questions_by_category(msg)
    else: 
        # –°—Ü–µ–Ω–∞—Ä–∏–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª (–Ω–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫–æ–π-—Ç–æ –∫–Ω–æ–ø–∫–∏)
        await detect_user_email(msg.from_user.id, msg.chat.id)

async def check_message_is_category(msg: types.Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    """
    categories = mongoStorage.get_categories()
    if msg.text.lower() in (i.lower() for i in categories):
        UserCacheCategories[msg.from_user.id] = msg.text.lower()
        return True
    
async def show_questions_by_category(msg: types.Message):
    category = UserCacheCategories[msg.from_user.id]
    if category == "–¥—Ä—É–≥–æ–µ":
        await detect_user_email(msg.from_user.id, msg.chat.id)
    
    else:
        questions = mongoStorage.get_questions_by_category(category)
        category_keyboard = kb.get_keyboard_by_category(questions)
        await msg.answer(text=category_keyboard.Text, reply_markup=category_keyboard.Keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("question_"))
async def callback_question(call: types.CallbackQuery):
    """
    –ó–¥–µ—Å—å –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—Ä–∞–Ω–Ω–µ–µ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    """
    if call.message.text.lower() == "–¥—Ä—É–≥–æ–µ":
        await detect_user_email(call.from_user.id, call.message.chat.id)
        return
    
    for qst in preparedQuestions:
        if qst.CallbackData == call.data:
            await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            await bot.send_message(chat_id=call.message.chat.id, text=qst.Answer)
            break

@dp.callback_query_handler(lambda c: c.data.startswith("other_"))
async def callback_other(call: types.CallbackQuery):
    """
    –ó–¥–µ—Å—å –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–≥–¥–∞ –æ–Ω —Ö–æ—á–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å
    """
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await detect_user_email(call.from_user.id, call.message.chat.id)

async def detect_user_email(user_id: int, chat_id: int):
    if not mongoStorage.get_user_email(user_id):
        await bot.send_message(chat_id=chat_id, text="–î–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–º–æ—â–∏, –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—á—Ç—É, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üìßüëç")
        await UserQuestion.Email.set()
    else:
        await bot.send_message(chat_id=chat_id, text="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
        await UserQuestion.New.set()

@dp.message_handler(state=UserQuestion.Email)
async def get_new_email_from_user(msg: types.Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—á—Ç—É, —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –ø–æ—á—Ç—É –∑–∞–Ω–æ–≤–æ. –ò –ù–ï –û–°–¢–ê–ù–û–í–ò–¢–°–Ø –ü–û–ö–ê –ù–ï –ü–û–õ–£–ß–ò–¢ –ù–û–†–ú –ü–û–ß–¢–£
    if not tools.validate_email(msg.text):
        await bot.send_message(chat_id=msg.chat.id, text=f"–ü–æ—á—Ç–∞ [{msg.text}] –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤–∞—à—É –ø–æ—á—Ç—É –±–µ–∑ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ")
        await UserQuestion.Email.set()
        return

    UserCacheEmails[msg.from_user.id] = msg.text
    await bot.send_message(chat_id=msg.chat.id, text="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
    await UserQuestion.New.set()

@dp.message_handler(state=UserQuestion.New)
async def process_new_user_question(msg: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 
    user_id = msg.from_user.id
    question = NewQuestion(
        Id=0,
        FirstName=msg.from_user.first_name,
        UserId=user_id,
        UserName=msg.from_user.username,
        Question=msg.text,
        Category=UserCacheCategories[user_id] if user_id in UserCacheCategories else "–¥—Ä—É–≥–æ–µ",
        Email=UserCacheEmails[msg.from_user.id] if user_id in UserCacheEmails else mongoStorage.get_user_email(user_id)

    )
    question_id = mongoStorage.save_new_question(question)
    timed_message = await msg.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —á–∞—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
    UserTimedMessageCache[msg.from_user.id] = timed_message.message_id
    await send_new_question_to_admins(question_id, question)
    await state.finish()


async def send_answer_to_user(question_id: int):
    answer = mongoStorage.get_answer_by_question_id(question_id)
    if not answer:
        return
    if answer.UserId in UserTimedMessageCache:
        await bot.delete_message(chat_id=answer.UserId, message_id=UserTimedMessageCache[answer.UserId])
        del UserTimedMessageCache[answer.UserId]

    msg = f"{answer.UserName}, –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å: {answer.Question}\n–ì–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {answer.Text}."
    keyboard = kb.get_rate_answer_keyboard(question_id)
    await bot.send_message(chat_id=answer.UserId, text=msg, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: "like" in c.data)
async def rate_answer(call: types.CallbackQuery):
    rate, question_id = call.data.split("_") # –¥–µ–ª–∏–º –ø–æ —Å–∏–º–≤–æ–ª—É '_' —Ç–∫ –Ω–∞–º –ø—Ä–∏–¥–µ—Ç —Ç–∞–∫–∞—è —Å—Ç—Ä–æ–∫–∞ 'dislike_1' –∏–ª–∏ 'like_1214'
    if rate == "like":
        mongoStorage.mark_answer_as_correct(int(question_id))
        print("–û—Ç–≤–µ—Ç –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è")
        await bot.send_message(chat_id=call.message.chat.id, text="–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–∞—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ! –°–ø–∞—Å–∏–±–æ! üéâ")
    else:
        print("–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è")
        mongoStorage.mark_answer_as_correct(int(question_id), liked=False)
        await bot.send_message(chat_id=call.message.chat.id, text="–ù–∞–º –∂–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ –¥–æ–≤–æ–ª—å–Ω—ã. –ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? üòì")
        await UserQuestion.New.set()

    await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)


@dp.callback_query_handler(lambda c: c.data == "continue_chating")
async def continue_chating(call: types.CallbackQuery):
    await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    await bot.send_message(chat_id=call.message.chat.id, text="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É")
    await UserQuestion.New.set()

# ------------------------------------------------------admin------------------------------------------------------------------

async def send_new_question_to_admins(question_id: int, question: NewQuestion = None):
    if not question:
        question = mongoStorage.get_question_by_id(question_id)
    
    message = "\n".join((
        f"‚ö†Ô∏è –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç: @{question.UserName}",
        f"id: {question_id}",
        f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question.FirstName}",
        f"üíå –ü–æ—á—Ç–∞: {question.Email}",
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {question.Category}",
        f"‚ùì–í–æ–ø—Ä–æ—Å: {question.Question}",
    ))

    for admin in config.Admins:
        await bot.send_message(chat_id=admin, text=message)


async def admin_message_filter(msg: types.Message):
    if msg.reply_to_message:
        await admin_reply_message(msg)
        return
    else:
        await check_message_is_admin_actions(msg)


async def admin_reply_message(msg: types.Message):
    question_text = msg.reply_to_message.text
    try:
        question_id = int(re.findall(r"id: \d+", question_text)[0].replace("id: ", ""))
    except:
        return
    
    closed = mongoStorage.check_question_is_closed(question_id)
    if closed is None:
        await msg.answer("–í–æ–ø—Ä–æ—Å –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î")
        return 
    
    if closed:
        answer = mongoStorage.get_admin_answer(question_id)
        await msg.answer(f"–ù–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª: @{answer.AdminName}\n–í–æ—Ç –æ—Ç–≤–µ—Ç:{answer.Answer}")
        return



    mongoStorage.save_answer(NewAnswer(
        QuestionId=question_id,
        Answer=msg.text,
        AdminId=msg.from_user.id,
        AdminName=msg.from_user.username,
        Question=question_text
    ))
    await msg.answer("–ì–æ—Ç–æ–≤–æ!")
    await send_answer_to_user(question_id)
    await send_notification_to_admins(question_id, ignore_id=msg.from_user.id)


async def send_notification_to_admins(question_id: int, ignore_id: int = 0):
    answer = mongoStorage.get_admin_answer(question_id)
    message = "\n".join((
        f"üë§ –ê–¥–º–∏–Ω @{answer.AdminName} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ {question_id}",
        f"‚ùî –í–æ–ø—Ä–æ—Å: {answer.Question}",
        f"üìù –û—Ç–≤–µ—Ç: {answer.Answer}"
    ))
    for admin in config.Admins:
        if admin == ignore_id: continue
        await bot.send_message(chat_id=admin, text=message)


async def check_message_is_admin_actions(msg: types.Message):
    action = msg.text.lower()
    if action == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stat = mongoStorage.get_statistics()
        categories_stat = "\n".join((f"{i.Category}: {i.Count}" for i in stat.CategoryStat))
        admins_stat = "\n\n".join((f"–ê–¥–º–∏–Ω: {i.UserName}\n–õ–∞–π–∫–æ–≤: {i.Likes}\n–î–∏–∑–ª–∞–π–∫–æ–≤: {i.Dislikes}\n–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏: {i.WithoutRate}" for i in stat.AdminStat))

        message = "\n".join((
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stat.UsersCount}",
            f"–ó–∞–∫—Ä—ã—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stat.ClosedCount}",
            f"–û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stat.OpenedCount}",
            f"\n–û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n{categories_stat}",
            f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–æ–≤:\n{admins_stat}"

        ))
        await msg.answer(message)
    elif action == "—Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
        await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await AdminMailing.New.set()

    elif action == "–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è":
        await send_open_question_to_admin(msg.chat.id)


async def send_open_question_to_admin(chat_id: int):
    questions = mongoStorage.get_open_requests()
    if not questions:
        await bot.send_message(chat_id=chat_id, text="–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        return
    for qst in questions:
        text = "\n".join((
                f"id: {qst.Id}",
                f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {qst.FirstName}",
                f"üíå –ü–æ—á—Ç–∞: {qst.Email}",
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {qst.Category}",
                f"‚ùì–í–æ–ø—Ä–æ—Å: {qst.Question}",
            ))
        await bot.send_message(chat_id, text)



@dp.message_handler(state=AdminMailing.New)
async def new_mailing(msg: types.Message, state: FSMContext):
    await msg.answer(text=msg.text, reply_markup=kb.get_mailing_keyboard())
    await bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)
    await state.finish()

@dp.callback_query_handler(lambda c: "mailing" in c.data)
async def process_mailing(call: types.CallbackQuery):
    if call.data == "edit_mailing":
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await AdminMailing.New.set()
    
    elif call.data == "send_mailing":
        users = mongoStorage.get_all_users()
        for user in users:
            await bot.send_message(chat_id=user, text=call.message.text)
        
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
        await bot.send_message(chat_id=call.from_user.id, text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        mongoStorage.save_mailing(Mailing(
            AdminId=call.from_user.id,
            AdminUser=call.from_user.username,
            Text=call.message.text,
            Date=datetime.now(),
            Views=len(mongoStorage.get_all_users())
        ))
    else:
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await bot.send_message(chat_id=call.from_user.id, text="–†–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç")



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)