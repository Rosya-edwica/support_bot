from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram import Bot, executor, Dispatcher, types
from datetime import datetime
import keyboards as kb
import argparse
import re
import os

from db import Storage
from models import Question, Answer, Mailing
import tools
import locale

parser = argparse.ArgumentParser(
                    prog='–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Edwica.ru',
                    description='–ù—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º',
                    epilog='Text at the bottom of help')

parser.add_argument("-b", "--bot", required=True, help="–í—ã–±–µ—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞: edwica, openedu, profinansy")
args = parser.parse_args()
config = [cfg for cfg in tools.load_config() if cfg.BotName == args.bot][0]

locale.setlocale(locale.LC_ALL, "ru_RU") # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
os.makedirs("data", exist_ok=True) # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫/–¥–∞–º–ø–æ–≤

bot = Bot(config.Token)
dp = Dispatcher(bot, storage=MemoryStorage())
mongoStorage = Storage(db_name=config.MongodbName, add_prepared_questions=True)
preparedQuestions = mongoStorage.get_questions()
UserCacheCategories = {} # –ö—ç—à –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≤—ã–±–∏—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
UserCacheEmails = {} # –ö—ç—à –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤ –ª–∏—à–Ω–∏–π —Ä–∞–∑ –Ω–µ –ª–µ–∑—Ç—å –≤ –ë–î
UserTimedMessageCache = {} # –ö—ç—à –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π


class UserQuestion(StatesGroup):
    """–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã"""
    Email = State()
    New = State()

class AdminMailing(StatesGroup):
    """–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    New = State()
    Image = State()


@dp.message_handler(commands=["start"])
async def start_command(msg: types.Message):
    """–ê–¥–º–∏–Ω—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω–∏ –∫–Ω–æ–ø–∫–∏, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–≥–∏–µ"""
    user_text = f"""–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}!üëã\n{config.StartMessage}"""

    user_id = msg.from_user.id
    if user_id in mongoStorage.get_admins():
        await msg.answer(text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞", reply_markup=kb.get_admin_menu())
    else:
        categories = mongoStorage.get_categories()
        await msg.answer(text=user_text, reply_markup=kb.get_users_menu(categories))


@dp.message_handler()
async def text_message_filter(msg: types.Message):
    """–§–∏–ª—å—Ç—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ –ø—Ä–∏—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è —Ä–∞–∑–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
    if msg.from_user.id in mongoStorage.get_admins():
        await admin_message_filter(msg)
    else:
        await user_message_filter(msg)


# ------------------------------------------------------user------------------------------------------------------------------

async def user_message_filter(msg: types.Message):
    """–ó–¥–µ—Å—å —É–∂–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ –Ω–∞–ø–∏—Å–∞–ª"""
    if await check_message_is_category(msg):
        # –°—Ü–µ–Ω–∞—Ä–∏–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await show_questions_by_category(msg)
    else:
        # –°—Ü–µ–Ω–∞—Ä–∏–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª (–Ω–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫–æ–π-—Ç–æ –∫–Ω–æ–ø–∫–∏)
        await detect_user_email(msg.from_user.id, msg.chat.id)

async def check_message_is_category(msg: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è"""
    if msg.text.lower() in (i.lower() for i in mongoStorage.get_categories()):
        # –ö–∏–¥–∞–µ–º –≤ –∫—ç—à, –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é - —ç—Ç–æ –Ω–∞–º –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        # —á–∞—Å—Ç–æ –±—É–¥–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", —Ç.–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
        UserCacheCategories[msg.from_user.id] = msg.text.lower()
        return True
    return False

async def show_questions_by_category(msg: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = UserCacheCategories[msg.from_user.id]
    if category == "–¥—Ä—É–≥–æ–µ":
        await detect_user_email(msg.from_user.id, msg.chat.id)
        return

    questions = mongoStorage.get_questions_by_category(category)
    category_keyboard = kb.get_keyboard_by_category(questions)
    if not category_keyboard: # –î–µ–ª–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–∞—à–ª–∞—Å—å –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        return
    await msg.answer(text=category_keyboard.Text, reply_markup=category_keyboard.Keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("question_"))
async def callback_question(call: types.CallbackQuery):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:
    –ø–æ callback_data –Ω—É–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –æ—Ç–≤–µ—Ç"""
    if call.message.text.lower() == "–¥—Ä—É–≥–æ–µ":
        await detect_user_email(call.from_user.id, call.message.chat.id)
        return

    for qst in preparedQuestions:
        if qst.CallbackData == call.data:
            await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            await bot.send_message(chat_id=call.message.chat.id, text=qst.Answer)
            break

@dp.callback_query_handler(lambda c: c.data.startswith("other_"))
async def callback_other(call: types.CallbackQuery):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "–¥—Ä—É–≥–æ–µ" """
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await detect_user_email(call.from_user.id, call.message.chat.id)

async def detect_user_email(user_id: int, chat_id: int):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤,
    —Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–≤–æ–¥–∏–ª –ª–∏ –æ–Ω —Å–≤–æ—é –ø–æ—á—Ç—É —Ä–∞–Ω—å—à–µ. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏. –ü–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ä–µ–≥—É–ª—è—Ä–∫–æ–π
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–≤–æ–¥–∏–ª –ø–æ—á—Ç—É, —Ç–æ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""

    if not mongoStorage.get_user_email(user_id):
        await bot.send_message(chat_id=chat_id, text="–î–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–æ–º–æ—â–∏, –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—á—Ç—É, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üìßüëç")
        await UserQuestion.Email.set()
    else:
        await bot.send_message(chat_id=chat_id, text="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
        await UserQuestion.New.set()

@dp.message_handler(state=UserQuestion.New)
async def process_new_user_question(msg: types.Message, state: FSMContext):
    """–ó–¥–µ—Å—å –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç —Å—Ä–µ–¥–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö"""
    await state.finish()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Ç–æ –≤—ã–∫–ª—é—á–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–º—É –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if await check_message_is_category(msg):
        await show_questions_by_category(msg)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ —Ö–æ—Ä–æ—à–æ —Å –ø–æ—á—Ç–æ–π
    user_id = msg.from_user.id
    if user_id in UserCacheEmails:
        email = UserCacheEmails[user_id]
    else:
        email = mongoStorage.get_user_email(user_id)
        if not email:
            await detect_user_email(user_id, msg.chat.id)
            return

    question = Question(
        Id=0,
        FirstName=msg.from_user.first_name,
        UserId=user_id,
        UserName=msg.from_user.username,
        Question=msg.text,
        Category=UserCacheCategories[user_id] if user_id in UserCacheCategories else "–¥—Ä—É–≥–æ–µ",
        Email=email,
        Date=datetime.now()

    )
    question_id = mongoStorage.save_new_question(question)
    # timed_message - –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    timed_message = await msg.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –û—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç –≤ —á–∞—Ç. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
    UserTimedMessageCache[msg.from_user.id] = timed_message.message_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
    await send_new_question_to_admins(question_id, question)

@dp.message_handler(state=UserQuestion.Email)
async def get_new_email_from_user(msg: types.Message, state: FSMContext):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—á—Ç—É, —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –ø–æ—á—Ç—É –∑–∞–Ω–æ–≤–æ.
    –ò –ù–ï –û–°–¢–ê–ù–û–í–ò–¢–°–Ø –ü–û–ö–ê –ù–ï –ü–û–õ–£–ß–ò–¢ –ù–û–†–ú –ü–û–ß–¢–£"""
    if not tools.validate_email(msg.text):
        await bot.send_message(chat_id=msg.chat.id, text=f"–ü–æ—á—Ç–∞ [{msg.text}] –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤–∞—à—É –ø–æ—á—Ç—É –±–µ–∑ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ")
        await UserQuestion.Email.set()
        return

    UserCacheEmails[msg.from_user.id] = msg.text
    await bot.send_message(chat_id=msg.chat.id, text="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
    # –¢–µ–ø–µ—Ä—å, –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await UserQuestion.New.set()

async def send_answer_to_user(question_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç
    answer = mongoStorage.get_answer(question_id)
    if not answer:
        return

    # –ï—Å–ª–∏ –º—ã —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –≤ –∫—ç—à —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: "–∞–¥–º–∏–Ω —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç", —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —á–∞—Ç–∞
    if answer.UserId in UserTimedMessageCache:
        await bot.delete_message(chat_id=answer.UserId, message_id=UserTimedMessageCache[answer.UserId])
        del UserTimedMessageCache[answer.UserId] # –í –∫—ç—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–º —Ç–æ–∂–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ

    msg = f"{answer.UserName}, –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å: {answer.Question}\n–ì–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {answer.Text}."
    await bot.send_message(chat_id=answer.UserId, text=msg, reply_markup=kb.get_rate_answer_keyboard(question_id))


@dp.callback_query_handler(lambda c: "like" in c.data)
async def rate_answer(call: types.CallbackQuery):
    """–†–µ—à–∞–µ–º —á–µ –Ω–∞–º –¥–µ–ª–∞—Ç—å —Å –æ—Ü–µ–Ω–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –æ–Ω–∞ —Ö–æ—Ä–æ—à–∞—è, —Ç–æ —Å—Ç–∞–≤–∏–º –ª–∞–π–∫ –∞–¥–º–∏–Ω—É,
    –µ—Å–ª–∏ –ø–ª–æ—Ö–∞—è, —Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ —Å–ª—É—á–∏–ª–æ—Å—å –∏ —Å—Ç–∞–≤–∏–º –∞–¥–º–∏–Ω—É –¥–∏–∑–ª–∞–π–∫"""
    rate, question_id = call.data.split("_") # –¥–µ–ª–∏–º –ø–æ —Å–∏–º–≤–æ–ª—É '_' —Ç–∫ –Ω–∞–º –ø—Ä–∏–¥–µ—Ç —Ç–∞–∫–∞—è —Å—Ç—Ä–æ–∫–∞ 'dislike_1' –∏–ª–∏ 'like_1214'
    if rate == "like":
        mongoStorage.mark_answer_as_correct(int(question_id))
        await bot.send_message(chat_id=call.message.chat.id, text="–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–∞—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ! –°–ø–∞—Å–∏–±–æ! üéâ")
    else:
        mongoStorage.mark_answer_as_correct(int(question_id), liked=False)
        await bot.send_message(chat_id=call.message.chat.id, text="–ù–∞–º –∂–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ –¥–æ–≤–æ–ª—å–Ω—ã. –ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? üòì")
        await UserQuestion.New.set() # –°–ª—É—à–∞–µ–º —á–µ –Ω–µ —Ç–∞–∫

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–æ–π
    await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)


@dp.callback_query_handler(lambda c: c.data == "continue_chating")
async def continue_chating(call: types.CallbackQuery):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —á–∞—Ç—Ç–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è"""

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–æ–π
    await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    await bot.send_message(chat_id=call.message.chat.id, text="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
    await UserQuestion.New.set()

# ------------------------------------------------------admin------------------------------------------------------------------

async def admin_message_filter(msg: types.Message):
    """—Ñ–∏–ª—å—Ç—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if msg.reply_to_message:
        await admin_reply_message(msg)
    else:
        await check_message_is_admin_actions(msg)

async def send_new_question_to_admins(question_id: int, question: Question):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
    message = "\n".join((
        f"‚ö†Ô∏è –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç: @{question.UserName}",
        f"id: {question_id}",
        f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question.FirstName}",
        f"üíå –ü–æ—á—Ç–∞: {question.Email}",
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {question.Category}",
        f"‚ùì–í–æ–ø—Ä–æ—Å: {question.Question}",
    ))
    for admin in mongoStorage.get_admins():
        await bot.send_message(chat_id=admin, text=message)


async def admin_reply_message(msg: types.Message):
    """–ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω —Ç–µ–≥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å id –∏–∑ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ"""
    question_text = msg.reply_to_message.text
    try:
        question_id = int(re.findall(r"id: \d+", question_text)[0].replace("id: ", ""))
    except:
        return

    closed = mongoStorage.check_question_is_closed(question_id)
    if closed is None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã–ª –ª–∏ —Ç–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤ –ë–î
        await msg.answer("–í–æ–ø—Ä–æ—Å –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î")
        return

    if closed:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—á–∞–ª–∏ –ª–∏ —Ä–∞–Ω—å—à–µ –∞–¥–º–∏–Ω—ã –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        answer = mongoStorage.get_answer(question_id)
        if answer:
            await msg.answer(f"–ù–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª: @{answer.AdminName}\n–í–æ—Ç –æ—Ç–≤–µ—Ç:{answer.Text}")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—à –æ—Ç–≤–µ—Ç
    mongoStorage.save_answer(Answer(
        Id=question_id,
        Text=msg.text,
        AdminId=msg.from_user.id,
        AdminName=msg.from_user.username,
        Question=question_text,
        UserId=0,
        UserName=""
    ))
    await msg.answer("–ì–æ—Ç–æ–≤–æ!")
    await send_answer_to_user(question_id)
    await send_notification_to_admins(question_id, ignore_id=msg.from_user.id)


async def send_notification_to_admins(question_id: int, ignore_id: int = 0):
    """–ü–∏—à–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º, —á—Ç–æ –¥—Ä—É–≥–æ–π –∞–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∫–∞–∫–æ–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ignore_id = —ç—Ç–æ id —Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –∏ –ø—Ä–∏–¥—É–º–∞–ª –æ—Ç–≤–µ—Ç. –ï–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–º—ã—Å–ª–∞ –Ω–µ—Ç"""

    answer = mongoStorage.get_answer(question_id)
    if not answer:
        return

    message = "\n".join((
        f"üë§ –ê–¥–º–∏–Ω @{answer.AdminName} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Ññ {question_id}",
        f"‚ùî –í–æ–ø—Ä–æ—Å: {answer.Question}",
        f"üìù –û—Ç–≤–µ—Ç: {answer.Text}"
    ))
    for admin in mongoStorage.get_admins():
        if admin == ignore_id: continue
        await bot.send_message(chat_id=admin, text=message)


async def check_message_is_admin_actions(msg: types.Message):
    """–§–∏–ª—å—Ç—Ä –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞"""
    action = msg.text.lower()
    match action:
        case "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await show_statistic(msg)
        case "–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è":
            await send_open_question_to_admin(msg.chat.id)
        case "—Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
            await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
            await AdminMailing.New.set()
        case "—Ä–∞—Å—Å—ã–ª–∫–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π":
            await msg.answer("–û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å—Ä–∞–∑—É –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—Å—Ç–æ–º")
            await AdminMailing.Image.set()



async def show_statistic(msg: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""

    stat = mongoStorage.get_statistics()
    categories_stat = "\n".join((f"{i.Category}: {i.Count}" for i in stat.CategoryStat))
    admins_stat = "\n\n".join((f"–ê–¥–º–∏–Ω: {i.UserName}\n–õ–∞–π–∫–æ–≤: {i.Likes}\n–î–∏–∑–ª–∞–π–∫–æ–≤: {i.Dislikes}\n–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏: {i.WithoutRate}" for i in stat.AdminStat))
    message = "\n".join((
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stat.UsersCount}",
        f"–ó–∞–∫—Ä—ã—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stat.ClosedCount}",
        f"–û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stat.OpenedCount}",
        f"\n–û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n{categories_stat}",
        f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–æ–≤:\n{admins_stat}"

    ))
    await msg.answer(message)

async def send_open_question_to_admin(chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    questions = mongoStorage.get_open_requests()
    if not questions:
        await bot.send_message(chat_id=chat_id, text="–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        return

    for qst in questions:
        text = "\n".join((
                f"#Ô∏è‚É£ id: {qst.Id}",
                f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {qst.FirstName if qst.FirstName else qst.UserName}",
                f"üíå –ü–æ—á—Ç–∞: {qst.Email}",
                f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {qst.Category}",
                f"‚ùì –í–æ–ø—Ä–æ—Å: {qst.Question}\n",
                f"üìÖ –î–∞—Ç–∞: {qst.Date.strftime('%d %B, %Y –≥. %H:%M')}"
            ))
        await bot.send_message(chat_id, text)

@dp.message_handler(state=AdminMailing.New)
async def new_mailing(msg: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
    timed_message = await msg.answer(text=msg.text, reply_markup=kb.get_mailing_keyboard())
    UserTimedMessageCache[msg.from_user.id] = timed_message.message_id # –£–¥–∞–ª–∏–º –ø–æ—Ç–æ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
    await state.finish()

@dp.callback_query_handler(lambda c: "mailing" in c.data)
async def process_mailing(call: types.CallbackQuery):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π"""
    if call.data == "send_mailing":
        for user in mongoStorage.get_all_users():
            await bot.send_message(chat_id=user, text=call.message.text)

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –∞–¥–º–∏–Ω–∞
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
        await bot.send_message(chat_id=call.from_user.id, text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        mongoStorage.save_mailing(Mailing(
            AdminId=call.from_user.id,
            AdminUser=call.from_user.username,
            Text=call.message.text,
            Date=datetime.now(),
            Views=len(mongoStorage.get_all_users()),
            Picture=""
        ))

    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    else:
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await bot.send_message(chat_id=call.from_user.id, text="–†–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç")

@dp.edited_message_handler(lambda msg: True)
async def edit_mailing(msg: types.Message):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞)"""
    try:
        await bot.delete_message(chat_id=msg.chat.id, message_id=UserTimedMessageCache[msg.from_user.id])
        del UserTimedMessageCache[msg.from_user.id]
    except BaseException as err:
        # –•–∑ —á–µ –¥–µ–ª–∞—Ç—å
        print(err)
        return

    timed_message = await msg.answer(text=msg.text, reply_markup=kb.get_mailing_keyboard())
    UserTimedMessageCache[msg.from_user.id] = timed_message.message_id


@dp.message_handler(state=AdminMailing.Image, content_types=["photo"])
async def img_mailing(msg: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"""
    timed_message = await msg.reply_photo(photo=msg.photo[-1].file_id, caption=msg.caption, reply_markup=kb.get_mailing_img_keyboard())
    UserTimedMessageCache[msg.from_user.id] = timed_message.message_id
    await state.finish()

@dp.callback_query_handler(lambda c: "img" in c.data)
async def process_img_mailing(call: types.CallbackQuery):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"""
    if call.data == "send_img":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ–æ—Ç–∫—É
        os.makedirs("data/imgs", exist_ok=True)
        img_path = f"data/imgs/{datetime.now()}.jpg"
        await call.message.photo[-1].download(destination_file=img_path)

        for user in mongoStorage.get_all_users():
            await bot.send_photo(chat_id=user, photo=call.message.photo[-1].file_id,  caption=call.message.caption)

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π
        await bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
        await bot.send_message(chat_id=call.from_user.id, text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        mongoStorage.save_mailing(Mailing(
            AdminId=call.from_user.id,
            AdminUser=call.from_user.username,
            Text=call.message.caption,
            Date=datetime.now(),
            Views=len(mongoStorage.get_all_users()),
            Picture=img_path
        ))
    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–º–µ–Ω—É
    else:
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await bot.send_message(chat_id=call.from_user.id, text="–†–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –±—É–¥–µ—Ç")

@dp.edited_message_handler(lambda msg: True, content_types=["photo"])
async def edit_img_mailing(msg: types.Message):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è c –∫–∞—Ä—Ç–∏–Ω–∫–æ–π (–±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞)"""
    try:
        await bot.delete_message(chat_id=msg.chat.id, message_id=UserTimedMessageCache[msg.from_user.id])
        del UserTimedMessageCache[msg.from_user.id]
    except BaseException as err:
        print(err)
        return

    timed_message = await msg.answer_photo(photo=msg.photo[-1].file_id, caption=msg.caption, reply_markup=kb.get_mailing_img_keyboard())
    UserTimedMessageCache[msg.from_user.id] = timed_message.message_id


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
